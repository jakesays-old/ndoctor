<ribbon:RibbonWindow x:Class="Probel.NDoctor.View.Core.MainWindow"
                     
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:ribbon="clr-namespace:Microsoft.Windows.Controls.Ribbon;assembly=RibbonControlsLibrary"
		xmlns:menu="clr-namespace:Probel.NDoctor.View.Plugins.MenuData;assembly=Probel.NDoctor.View.Plugins"           
		xmlns:data="clr-namespace:Probel.NDoctor.View.Core"
        xmlns:converter="clr-namespace:Probel.NDoctor.View.Plugins.Converters;assembly=Probel.NDoctor.View.Plugins"
        xmlns:ad="clr-namespace:AvalonDock;assembly=AvalonDock"
                     
		Title="{Binding Path=WindowTitle}"
		Width="1024" Height="768" 
        WindowStartupLocation="CenterScreen" 
        Icon="/Probel.NDoctor.View.Core;component/Images/Icon.ico">

    <Window.Resources>

        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <converter:StatusTypeToImageConverter x:Key="StatusToImageConverter"/>

        <!-- RibbonTab -->
        <Style TargetType="{x:Type ribbon:RibbonTab}">
            <Setter Property="ContextualTabGroupHeader" Value="{Binding ContextualTabGroupHeader}" />
            <Setter Property="Header" Value="{Binding Header}" />
            <Setter Property="ItemsSource" Value="{Binding GroupDataCollection}" />
            <Setter Property="IsSelected" Value="{Binding IsSelected}"/>
        </Style>

        <!-- RibbonContextualTabGroup -->
        <Style TargetType="{x:Type ribbon:RibbonContextualTabGroup}">
            <Setter Property="Header" Value="{Binding Header}" />
            <Setter Property="Background" Value="{Binding Background}"/>
            <Setter Property="Visibility" Value="{Binding IsVisible,Converter={StaticResource BooleanToVisibilityConverter}}" />
        </Style>

        <!-- RibbonControl -->
        <Style x:Key="RibbonControlStyle">
            <Setter Property="ribbon:RibbonControlService.Label" Value="{Binding Label}" />
            <Setter Property="ribbon:RibbonControlService.LargeImageSource" Value="{Binding SmallImage}" />
            <Setter Property="ribbon:RibbonControlService.SmallImageSource" Value="{Binding LargeImage}" />
            <Setter Property="ribbon:RibbonControlService.ToolTipTitle" Value="{Binding ToolTipTitle}" />
            <Setter Property="ribbon:RibbonControlService.ToolTipDescription" Value="{Binding ToolTipDescription}" />
            <Setter Property="ribbon:RibbonControlService.ToolTipImageSource" Value="{Binding ToolTipImage}" />
        </Style>

        <!-- RibbonGroup -->
        <Style TargetType="{x:Type ribbon:RibbonGroup}" BasedOn="{StaticResource RibbonControlStyle}">
            <Setter Property="QuickAccessToolBarId" Value="{Binding Label}" />
            <Setter Property="Header" Value="{Binding Header}" />
            <Setter Property="ItemsSource" Value="{Binding ButtonDataCollection}" />
        </Style>

        <!-- RibbonButton -->
        <DataTemplate DataType="{x:Type menu:RibbonButtonData}">
            <ribbon:RibbonButton Label="{Binding Label}" Command="{Binding Command}" SmallImageSource="{Binding SmallImage}"  LargeImageSource="{Binding LargeImage}"/>
        </DataTemplate>

        <!-- RibbonSeparator -->
        <ItemContainerTemplate x:Key="{ItemContainerTemplateKey DataType={x:Type menu:RibbonSeparatorData}}">
            <ribbon:RibbonSeparator />
        </ItemContainerTemplate>

        <!-- RibbonMenuButton -->
        <DataTemplate DataType="{x:Type menu:RibbonMenuButtonData}">
            <ribbon:RibbonMenuButton />
        </DataTemplate>
        <Style TargetType="{x:Type ribbon:RibbonMenuButton}" BasedOn="{StaticResource RibbonControlStyle}">
            <Setter Property="ItemsSource" Value="{Binding ControlDataCollection}" />
            <Setter Property="QuickAccessToolBarId" Value="{Binding Command}" />
            <Setter Property="CanUserResizeHorizontally" Value="True" />
            <Setter Property="CanUserResizeVertically" Value="True" />
            <Setter Property="UsesItemContainerTemplate" Value="True" />
            <Setter Property="DropDownHeight" Value="200" />
        </Style>

        <!-- RibbonMenuItem -->
        <ItemContainerTemplate x:Key="{ItemContainerTemplateKey DataType={x:Type menu:RibbonMenuItemData}}">
            <ribbon:RibbonMenuItem />
        </ItemContainerTemplate>
        <Style TargetType="{x:Type ribbon:RibbonMenuItem}">
            <Setter Property="ImageSource" Value="{Binding SmallImage}" />
            <Setter Property="ribbon:RibbonControlService.ToolTipTitle" Value="{Binding ToolTipTitle}" />
            <Setter Property="ribbon:RibbonControlService.ToolTipDescription" Value="{Binding ToolTipDescription}" />
            <Setter Property="ribbon:RibbonControlService.ToolTipImageSource" Value="{Binding ToolTipImage}" />
            <Setter Property="Command" Value="{Binding Command}" />
            <Setter Property="CanUserResizeHorizontally" Value="True" />
            <Setter Property="CanUserResizeVertically" Value="True" />
            <Setter Property="UsesItemContainerTemplate" Value="True" />
            <Setter Property="DropDownHeight" Value="200" />
            <Setter Property="ItemsSource" Value="{Binding ControlDataCollection}" />
            <Setter Property="IsCheckable" Value="{Binding IsCheckable}" />
            <Setter Property="IsChecked" Value="{Binding IsChecked}" />
            <!-- Note that setting Header property is not sufficient in this case 
					 because the HeaderTemplate is implicitly resolved to type MenuItemData 
					 which is the item for this container. Hence we explicitly specify the 
					 HeaderTemplate to avoid the implicit DataTemplate resolution from kicking in. -->
            <Setter Property="HeaderTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <TextBlock Text="{Binding Label}" />
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- RibbonApplicationMenuItem -->
        <ItemContainerTemplate x:Key="{ItemContainerTemplateKey DataType={x:Type menu:RibbonApplicationMenuItemData}}">
            <ribbon:RibbonApplicationMenuItem />
        </ItemContainerTemplate>
        <Style TargetType="{x:Type ribbon:RibbonApplicationMenuItem}" BasedOn="{StaticResource {x:Type ribbon:RibbonMenuItem}}" />


    </Window.Resources>
    <Grid x:Name="LayoutRoot">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="26"/>
        </Grid.RowDefinitions>

        <ribbon:Ribbon Grid.Row="0" 
                       x:Name="ribbon"
					   ItemsSource="{Binding Source={x:Static data:App.RibbonData},Path=TabDataCollection}"
					   ContextualTabGroupsSource="{Binding Source={x:Static data:App.RibbonData},Path=ContextualTabGroupDataCollection}">

            <ribbon:Ribbon.ApplicationMenu>
                <ribbon:RibbonApplicationMenu 
					DataContext="{Binding Source={x:Static data:App.RibbonData},Path=ApplicationMenuData}" 
					SmallImageSource="{Binding SmallImage}"
					ToolTipTitle="{Binding ToolTipTitle}"
					ToolTipDescription="{Binding ToolTipDescription}"
					ToolTipImageSource="{Binding ToolTipImage}"
					UsesItemContainerTemplate="True"
					ItemsSource="{Binding ControlDataCollection}" />
            </ribbon:Ribbon.ApplicationMenu>
        </ribbon:Ribbon>
        <ad:DockingManager x:Name="dockManger"
                           Grid.Row="1">
            <ad:ResizingPanel Orientation="Vertical">
                <ad:ResizingPanel Orientation="Horizontal">
                    <ad:DockablePane x:Name="sideMenu"
                                     ad:ResizingPanel.ResizeWidth="250">     
                    </ad:DockablePane>
                    <ad:DocumentPane ShowHeader="False">
                        <ad:DocumentContent>
                            <Frame x:Name="workbench" 
                                   NavigationUIVisibility="Hidden"/>
                        </ad:DocumentContent>
                    </ad:DocumentPane>
                </ad:ResizingPanel>
            </ad:ResizingPanel>
        </ad:DockingManager>
        <StatusBar Grid.Row="3">
            <StatusBarItem DockPanel.Dock="Right">
                <TextBlock Text="{Binding Path=ConnectedPatientText}"/>
            </StatusBarItem>
            <StatusBarItem>
                <Image Source="{Binding Type, Converter={StaticResource StatusToImageConverter}}"/>
            </StatusBarItem>
            <StatusBarItem>
                <TextBlock Text="{Binding Message}"/>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</ribbon:RibbonWindow>
